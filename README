Purpose
-------
The purpose of this component is to encapsulate the caching implementation.
Currently, it wraps the Redis Implementation.
It uses the spring specifc dependencies for caching.

It also adds a few custom features as  below which are not available by default in Spring Caching
-------------------------------------------------------------------------------------------------
1.Configuring Cache Expiry in Seconds for one or more Caches
2.Configuring Default Cache Expiry 
3.Configuring Cache Expiry as an absolute Datetime based on CRON format
4.Invalidate all or specific keys from a cache


It uses the 'caching-component' library as available in, https://github.com/gsamartian/caching-component

Details
-------
The Service exposes below end-points
====================================

Endpoints for Fetching Entities by Id
*************************************
GET /members/{id}
GET /users/{id}


Endpoints for Invalidating Caches
*******************************
DELETE /cache/users/{id}           - For Invalidating specifc keys
DELETE /cache/users                - For Invalidating all keys of a cache

Note:
=====
Ensure Redis Server is up and running before starting the service


Application Configuration
=========================
The App can be configured for Caching as below,

1. Cache Configuration
**********************
app:
  cache-config:
  - name: members
    expiry-seconds: 60
  - name: users
    expiry-time: "0 * * * * ?"   
  - name: plans
    expiry-time: "0 55 23 * * ?"   
    
We can specify one or more caches as required by the service.
For each cache, we can provide a 'name', either TTL of cache as 'expiry-seconds' or as a absolute time using 'expiry-time'
If using 'expiry-time', the format to be followed is same as Standard CRON format.

If the expiry-time as provided by the CRON format is triggered then the cache associated by the 'app.cache-config.name' would
be cleared/flushed.

If expiry-seconds is used, then after the elapse of duration of seconds the cache would be cleared.
    
    
2. Redis Configuration
**********************
spring:
  cache:
    type: redis  
  redis:
    host: 127.0.0.1
    port: 6380

We need to provide the type of cache as 'redis' when using redis as the Cache Server.
Also, we need to provide machine on which redis server is running as 'host' and also the port.

    